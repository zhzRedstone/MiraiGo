// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: oidb0x5eb.proto

package oidb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type D5EBReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uins                              []uint64 `protobuf:"varint,1,rep,name=uins" json:"uins,omitempty"`
	MaxPackageSize                    *uint32  `protobuf:"varint,3,opt,name=max_package_size,json=maxPackageSize" json:"max_package_size,omitempty"`
	Openid                            [][]byte `protobuf:"bytes,4,rep,name=openid" json:"openid,omitempty"`
	Appid                             *uint32  `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	ReqNick                           *uint32  `protobuf:"varint,20002,opt,name=reqNick" json:"reqNick,omitempty"`
	ReqCountry                        *uint32  `protobuf:"varint,20003,opt,name=reqCountry" json:"reqCountry,omitempty"`
	ReqProvince                       *int32   `protobuf:"varint,20004,opt,name=reqProvince" json:"reqProvince,omitempty"`
	ReqGender                         *int32   `protobuf:"varint,20009,opt,name=reqGender" json:"reqGender,omitempty"`
	ReqAllow                          *int32   `protobuf:"varint,20014,opt,name=reqAllow" json:"reqAllow,omitempty"`
	ReqFaceId                         *int32   `protobuf:"varint,20015,opt,name=reqFaceId" json:"reqFaceId,omitempty"`
	ReqCity                           *int32   `protobuf:"varint,20020,opt,name=reqCity" json:"reqCity,omitempty"`
	ReqConstellation                  *int32   `protobuf:"varint,20022,opt,name=reqConstellation" json:"reqConstellation,omitempty"`
	ReqCommonPlace1                   *int32   `protobuf:"varint,20027,opt,name=reqCommonPlace1" json:"reqCommonPlace1,omitempty"`
	ReqMss3Bitmapextra                *int32   `protobuf:"varint,20030,opt,name=reqMss3Bitmapextra" json:"reqMss3Bitmapextra,omitempty"`
	ReqBirthday                       *int32   `protobuf:"varint,20031,opt,name=reqBirthday" json:"reqBirthday,omitempty"`
	ReqCityId                         *int32   `protobuf:"varint,20032,opt,name=reqCityId" json:"reqCityId,omitempty"`
	ReqLang1                          *int32   `protobuf:"varint,20033,opt,name=reqLang1" json:"reqLang1,omitempty"`
	ReqLang2                          *int32   `protobuf:"varint,20034,opt,name=reqLang2" json:"reqLang2,omitempty"`
	ReqLang3                          *int32   `protobuf:"varint,20035,opt,name=reqLang3" json:"reqLang3,omitempty"`
	ReqAge                            *int32   `protobuf:"varint,20037,opt,name=reqAge" json:"reqAge,omitempty"`
	ReqCityZoneId                     *int32   `protobuf:"varint,20041,opt,name=reqCityZoneId" json:"reqCityZoneId,omitempty"`
	ReqOin                            *int32   `protobuf:"varint,20056,opt,name=reqOin" json:"reqOin,omitempty"`
	ReqBubbleId                       *int32   `protobuf:"varint,20059,opt,name=reqBubbleId" json:"reqBubbleId,omitempty"`
	ReqMss2Identity                   *int32   `protobuf:"varint,21001,opt,name=reqMss2Identity" json:"reqMss2Identity,omitempty"`
	ReqMss1Service                    *int32   `protobuf:"varint,21002,opt,name=reqMss1Service" json:"reqMss1Service,omitempty"`
	ReqLflag                          *int32   `protobuf:"varint,21003,opt,name=reqLflag" json:"reqLflag,omitempty"`
	ReqExtFlag                        *int32   `protobuf:"varint,21004,opt,name=reqExtFlag" json:"reqExtFlag,omitempty"`
	ReqBasicSvrFlag                   *int32   `protobuf:"varint,21006,opt,name=reqBasicSvrFlag" json:"reqBasicSvrFlag,omitempty"`
	ReqBasicCliFlag                   *int32   `protobuf:"varint,21007,opt,name=reqBasicCliFlag" json:"reqBasicCliFlag,omitempty"`
	ReqFullBirthday                   *int32   `protobuf:"varint,26004,opt,name=reqFullBirthday" json:"reqFullBirthday,omitempty"`
	ReqFullAge                        *int32   `protobuf:"varint,26005,opt,name=reqFullAge" json:"reqFullAge,omitempty"`
	ReqSimpleUpdateTime               *int32   `protobuf:"varint,26010,opt,name=reqSimpleUpdateTime" json:"reqSimpleUpdateTime,omitempty"`
	ReqMssUpdateTime                  *int32   `protobuf:"varint,26011,opt,name=reqMssUpdateTime" json:"reqMssUpdateTime,omitempty"`
	ReqPstnMultiCallTime              *int32   `protobuf:"varint,26012,opt,name=reqPstnMultiCallTime" json:"reqPstnMultiCallTime,omitempty"`
	ReqPstnMultiLastGuideRechargeTime *int32   `protobuf:"varint,26013,opt,name=reqPstnMultiLastGuideRechargeTime" json:"reqPstnMultiLastGuideRechargeTime,omitempty"`
	ReqPstnC2CCallTime                *int32   `protobuf:"varint,26014,opt,name=reqPstnC2cCallTime" json:"reqPstnC2cCallTime,omitempty"`
	ReqPstnC2CLastGuideRechargeTime   *int32   `protobuf:"varint,26015,opt,name=reqPstnC2cLastGuideRechargeTime" json:"reqPstnC2cLastGuideRechargeTime,omitempty"`
	ReqGroupMemCreditFlag             *int32   `protobuf:"varint,27022,opt,name=reqGroupMemCreditFlag" json:"reqGroupMemCreditFlag,omitempty"`
	ReqFaceAddonId                    *int32   `protobuf:"varint,27025,opt,name=reqFaceAddonId" json:"reqFaceAddonId,omitempty"`
	ReqMusicGene                      *int32   `protobuf:"varint,27026,opt,name=reqMusicGene" json:"reqMusicGene,omitempty"`
	ReqStrangerNick                   *int32   `protobuf:"varint,27034,opt,name=reqStrangerNick" json:"reqStrangerNick,omitempty"`
	ReqStrangerDeclare                *int32   `protobuf:"varint,27035,opt,name=reqStrangerDeclare" json:"reqStrangerDeclare,omitempty"`
	ReqLoveStatus                     *int32   `protobuf:"varint,27036,opt,name=reqLoveStatus" json:"reqLoveStatus,omitempty"`
	ReqProfession                     *int32   `protobuf:"varint,27037,opt,name=reqProfession" json:"reqProfession,omitempty"`
	ReqVasColorringFlag               *int32   `protobuf:"varint,27041,opt,name=reqVasColorringFlag" json:"reqVasColorringFlag,omitempty"`
	ReqCharm                          *int32   `protobuf:"varint,27052,opt,name=reqCharm" json:"reqCharm,omitempty"`
	ReqApolloTimestamp                *int32   `protobuf:"varint,27059,opt,name=reqApolloTimestamp" json:"reqApolloTimestamp,omitempty"`
	ReqVasFontIdFlag                  *int32   `protobuf:"varint,27201,opt,name=reqVasFontIdFlag" json:"reqVasFontIdFlag,omitempty"`
	ReqGlobalGroupLevel               *int32   `protobuf:"varint,27208,opt,name=reqGlobalGroupLevel" json:"reqGlobalGroupLevel,omitempty"`
	ReqInvite2GroupAutoAgreeFlag      *int32   `protobuf:"varint,40346,opt,name=reqInvite2groupAutoAgreeFlag" json:"reqInvite2groupAutoAgreeFlag,omitempty"`
	ReqSubaccountDisplayThirdQqFlag   *int32   `protobuf:"varint,40348,opt,name=reqSubaccountDisplayThirdQqFlag" json:"reqSubaccountDisplayThirdQqFlag,omitempty"`
	NotifyPartakeLikeRankingListFlag  *int32   `protobuf:"varint,40350,opt,name=notifyPartakeLikeRankingListFlag" json:"notifyPartakeLikeRankingListFlag,omitempty"`
	ReqLightalkSwitch                 *int32   `protobuf:"varint,40506,opt,name=reqLightalkSwitch" json:"reqLightalkSwitch,omitempty"`
	ReqMusicRingVisible               *int32   `protobuf:"varint,40507,opt,name=reqMusicRingVisible" json:"reqMusicRingVisible,omitempty"`
	ReqMusicRingAutoplay              *int32   `protobuf:"varint,40508,opt,name=reqMusicRingAutoplay" json:"reqMusicRingAutoplay,omitempty"`
	ReqMusicRingRedpoint              *int32   `protobuf:"varint,40509,opt,name=reqMusicRingRedpoint" json:"reqMusicRingRedpoint,omitempty"`
	TorchDisableFlag                  *int32   `protobuf:"varint,40525,opt,name=torchDisableFlag" json:"torchDisableFlag,omitempty"`
	ReqVasMagicfontFlag               *int32   `protobuf:"varint,40530,opt,name=reqVasMagicfontFlag" json:"reqVasMagicfontFlag,omitempty"`
	ReqVipFlag                        *int32   `protobuf:"varint,41756,opt,name=reqVipFlag" json:"reqVipFlag,omitempty"`
	ReqAuthFlag                       *int32   `protobuf:"varint,41783,opt,name=reqAuthFlag" json:"reqAuthFlag,omitempty"`
	ReqForbidFlag                     *int32   `protobuf:"varint,41784,opt,name=reqForbidFlag" json:"reqForbidFlag,omitempty"`
	ReqGodForbid                      *int32   `protobuf:"varint,41804,opt,name=reqGodForbid" json:"reqGodForbid,omitempty"`
	ReqGodFlag                        *int32   `protobuf:"varint,41805,opt,name=reqGodFlag" json:"reqGodFlag,omitempty"`
	ReqCharmLevel                     *int32   `protobuf:"varint,41950,opt,name=reqCharmLevel" json:"reqCharmLevel,omitempty"`
	ReqCharmShown                     *int32   `protobuf:"varint,41973,opt,name=reqCharmShown" json:"reqCharmShown,omitempty"`
	ReqFreshnewsNotifyFlag            *int32   `protobuf:"varint,41993,opt,name=reqFreshnewsNotifyFlag" json:"reqFreshnewsNotifyFlag,omitempty"`
	ReqApolloVipLevel                 *int32   `protobuf:"varint,41999,opt,name=reqApolloVipLevel" json:"reqApolloVipLevel,omitempty"`
	ReqApolloVipFlag                  *int32   `protobuf:"varint,42003,opt,name=reqApolloVipFlag" json:"reqApolloVipFlag,omitempty"`
	ReqPstnC2CVip                     *int32   `protobuf:"varint,42005,opt,name=reqPstnC2cVip" json:"reqPstnC2cVip,omitempty"`
	ReqPstnMultiVip                   *int32   `protobuf:"varint,42006,opt,name=reqPstnMultiVip" json:"reqPstnMultiVip,omitempty"`
	ReqPstnEverC2CVip                 *int32   `protobuf:"varint,42007,opt,name=reqPstnEverC2cVip" json:"reqPstnEverC2cVip,omitempty"`
	ReqPstnEverMultiVip               *int32   `protobuf:"varint,42008,opt,name=reqPstnEverMultiVip" json:"reqPstnEverMultiVip,omitempty"`
	ReqPstnMultiTryFlag               *int32   `protobuf:"varint,42011,opt,name=reqPstnMultiTryFlag" json:"reqPstnMultiTryFlag,omitempty"`
	ReqPstnC2CTryFlag                 *int32   `protobuf:"varint,42012,opt,name=reqPstnC2cTryFlag" json:"reqPstnC2cTryFlag,omitempty"`
	ReqSubscribeNearbyassistantSwitch *int32   `protobuf:"varint,42024,opt,name=reqSubscribeNearbyassistantSwitch" json:"reqSubscribeNearbyassistantSwitch,omitempty"`
	ReqTorchbearerFlag                *int32   `protobuf:"varint,42051,opt,name=reqTorchbearerFlag" json:"reqTorchbearerFlag,omitempty"`
	PreloadDisableFlag                *int32   `protobuf:"varint,42073,opt,name=preloadDisableFlag" json:"preloadDisableFlag,omitempty"`
	ReqMedalwallFlag                  *int32   `protobuf:"varint,42075,opt,name=reqMedalwallFlag" json:"reqMedalwallFlag,omitempty"`
	NotifyOnLikeRankingListFlag       *int32   `protobuf:"varint,42092,opt,name=notifyOnLikeRankingListFlag" json:"notifyOnLikeRankingListFlag,omitempty"`
	ReqApolloStatus                   *int32   `protobuf:"varint,42980,opt,name=reqApolloStatus" json:"reqApolloStatus,omitempty"`
}

func (x *D5EBReqBody) Reset() {
	*x = D5EBReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x5eb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D5EBReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D5EBReqBody) ProtoMessage() {}

func (x *D5EBReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x5eb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D5EBReqBody.ProtoReflect.Descriptor instead.
func (*D5EBReqBody) Descriptor() ([]byte, []int) {
	return file_oidb0x5eb_proto_rawDescGZIP(), []int{0}
}

func (x *D5EBReqBody) GetUins() []uint64 {
	if x != nil {
		return x.Uins
	}
	return nil
}

func (x *D5EBReqBody) GetMaxPackageSize() uint32 {
	if x != nil && x.MaxPackageSize != nil {
		return *x.MaxPackageSize
	}
	return 0
}

func (x *D5EBReqBody) GetOpenid() [][]byte {
	if x != nil {
		return x.Openid
	}
	return nil
}

func (x *D5EBReqBody) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *D5EBReqBody) GetReqNick() uint32 {
	if x != nil && x.ReqNick != nil {
		return *x.ReqNick
	}
	return 0
}

func (x *D5EBReqBody) GetReqCountry() uint32 {
	if x != nil && x.ReqCountry != nil {
		return *x.ReqCountry
	}
	return 0
}

func (x *D5EBReqBody) GetReqProvince() int32 {
	if x != nil && x.ReqProvince != nil {
		return *x.ReqProvince
	}
	return 0
}

func (x *D5EBReqBody) GetReqGender() int32 {
	if x != nil && x.ReqGender != nil {
		return *x.ReqGender
	}
	return 0
}

func (x *D5EBReqBody) GetReqAllow() int32 {
	if x != nil && x.ReqAllow != nil {
		return *x.ReqAllow
	}
	return 0
}

func (x *D5EBReqBody) GetReqFaceId() int32 {
	if x != nil && x.ReqFaceId != nil {
		return *x.ReqFaceId
	}
	return 0
}

func (x *D5EBReqBody) GetReqCity() int32 {
	if x != nil && x.ReqCity != nil {
		return *x.ReqCity
	}
	return 0
}

func (x *D5EBReqBody) GetReqConstellation() int32 {
	if x != nil && x.ReqConstellation != nil {
		return *x.ReqConstellation
	}
	return 0
}

func (x *D5EBReqBody) GetReqCommonPlace1() int32 {
	if x != nil && x.ReqCommonPlace1 != nil {
		return *x.ReqCommonPlace1
	}
	return 0
}

func (x *D5EBReqBody) GetReqMss3Bitmapextra() int32 {
	if x != nil && x.ReqMss3Bitmapextra != nil {
		return *x.ReqMss3Bitmapextra
	}
	return 0
}

func (x *D5EBReqBody) GetReqBirthday() int32 {
	if x != nil && x.ReqBirthday != nil {
		return *x.ReqBirthday
	}
	return 0
}

func (x *D5EBReqBody) GetReqCityId() int32 {
	if x != nil && x.ReqCityId != nil {
		return *x.ReqCityId
	}
	return 0
}

func (x *D5EBReqBody) GetReqLang1() int32 {
	if x != nil && x.ReqLang1 != nil {
		return *x.ReqLang1
	}
	return 0
}

func (x *D5EBReqBody) GetReqLang2() int32 {
	if x != nil && x.ReqLang2 != nil {
		return *x.ReqLang2
	}
	return 0
}

func (x *D5EBReqBody) GetReqLang3() int32 {
	if x != nil && x.ReqLang3 != nil {
		return *x.ReqLang3
	}
	return 0
}

func (x *D5EBReqBody) GetReqAge() int32 {
	if x != nil && x.ReqAge != nil {
		return *x.ReqAge
	}
	return 0
}

func (x *D5EBReqBody) GetReqCityZoneId() int32 {
	if x != nil && x.ReqCityZoneId != nil {
		return *x.ReqCityZoneId
	}
	return 0
}

func (x *D5EBReqBody) GetReqOin() int32 {
	if x != nil && x.ReqOin != nil {
		return *x.ReqOin
	}
	return 0
}

func (x *D5EBReqBody) GetReqBubbleId() int32 {
	if x != nil && x.ReqBubbleId != nil {
		return *x.ReqBubbleId
	}
	return 0
}

func (x *D5EBReqBody) GetReqMss2Identity() int32 {
	if x != nil && x.ReqMss2Identity != nil {
		return *x.ReqMss2Identity
	}
	return 0
}

func (x *D5EBReqBody) GetReqMss1Service() int32 {
	if x != nil && x.ReqMss1Service != nil {
		return *x.ReqMss1Service
	}
	return 0
}

func (x *D5EBReqBody) GetReqLflag() int32 {
	if x != nil && x.ReqLflag != nil {
		return *x.ReqLflag
	}
	return 0
}

func (x *D5EBReqBody) GetReqExtFlag() int32 {
	if x != nil && x.ReqExtFlag != nil {
		return *x.ReqExtFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqBasicSvrFlag() int32 {
	if x != nil && x.ReqBasicSvrFlag != nil {
		return *x.ReqBasicSvrFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqBasicCliFlag() int32 {
	if x != nil && x.ReqBasicCliFlag != nil {
		return *x.ReqBasicCliFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqFullBirthday() int32 {
	if x != nil && x.ReqFullBirthday != nil {
		return *x.ReqFullBirthday
	}
	return 0
}

func (x *D5EBReqBody) GetReqFullAge() int32 {
	if x != nil && x.ReqFullAge != nil {
		return *x.ReqFullAge
	}
	return 0
}

func (x *D5EBReqBody) GetReqSimpleUpdateTime() int32 {
	if x != nil && x.ReqSimpleUpdateTime != nil {
		return *x.ReqSimpleUpdateTime
	}
	return 0
}

func (x *D5EBReqBody) GetReqMssUpdateTime() int32 {
	if x != nil && x.ReqMssUpdateTime != nil {
		return *x.ReqMssUpdateTime
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnMultiCallTime() int32 {
	if x != nil && x.ReqPstnMultiCallTime != nil {
		return *x.ReqPstnMultiCallTime
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnMultiLastGuideRechargeTime() int32 {
	if x != nil && x.ReqPstnMultiLastGuideRechargeTime != nil {
		return *x.ReqPstnMultiLastGuideRechargeTime
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnC2CCallTime() int32 {
	if x != nil && x.ReqPstnC2CCallTime != nil {
		return *x.ReqPstnC2CCallTime
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnC2CLastGuideRechargeTime() int32 {
	if x != nil && x.ReqPstnC2CLastGuideRechargeTime != nil {
		return *x.ReqPstnC2CLastGuideRechargeTime
	}
	return 0
}

func (x *D5EBReqBody) GetReqGroupMemCreditFlag() int32 {
	if x != nil && x.ReqGroupMemCreditFlag != nil {
		return *x.ReqGroupMemCreditFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqFaceAddonId() int32 {
	if x != nil && x.ReqFaceAddonId != nil {
		return *x.ReqFaceAddonId
	}
	return 0
}

func (x *D5EBReqBody) GetReqMusicGene() int32 {
	if x != nil && x.ReqMusicGene != nil {
		return *x.ReqMusicGene
	}
	return 0
}

func (x *D5EBReqBody) GetReqStrangerNick() int32 {
	if x != nil && x.ReqStrangerNick != nil {
		return *x.ReqStrangerNick
	}
	return 0
}

func (x *D5EBReqBody) GetReqStrangerDeclare() int32 {
	if x != nil && x.ReqStrangerDeclare != nil {
		return *x.ReqStrangerDeclare
	}
	return 0
}

func (x *D5EBReqBody) GetReqLoveStatus() int32 {
	if x != nil && x.ReqLoveStatus != nil {
		return *x.ReqLoveStatus
	}
	return 0
}

func (x *D5EBReqBody) GetReqProfession() int32 {
	if x != nil && x.ReqProfession != nil {
		return *x.ReqProfession
	}
	return 0
}

func (x *D5EBReqBody) GetReqVasColorringFlag() int32 {
	if x != nil && x.ReqVasColorringFlag != nil {
		return *x.ReqVasColorringFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqCharm() int32 {
	if x != nil && x.ReqCharm != nil {
		return *x.ReqCharm
	}
	return 0
}

func (x *D5EBReqBody) GetReqApolloTimestamp() int32 {
	if x != nil && x.ReqApolloTimestamp != nil {
		return *x.ReqApolloTimestamp
	}
	return 0
}

func (x *D5EBReqBody) GetReqVasFontIdFlag() int32 {
	if x != nil && x.ReqVasFontIdFlag != nil {
		return *x.ReqVasFontIdFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqGlobalGroupLevel() int32 {
	if x != nil && x.ReqGlobalGroupLevel != nil {
		return *x.ReqGlobalGroupLevel
	}
	return 0
}

func (x *D5EBReqBody) GetReqInvite2GroupAutoAgreeFlag() int32 {
	if x != nil && x.ReqInvite2GroupAutoAgreeFlag != nil {
		return *x.ReqInvite2GroupAutoAgreeFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqSubaccountDisplayThirdQqFlag() int32 {
	if x != nil && x.ReqSubaccountDisplayThirdQqFlag != nil {
		return *x.ReqSubaccountDisplayThirdQqFlag
	}
	return 0
}

func (x *D5EBReqBody) GetNotifyPartakeLikeRankingListFlag() int32 {
	if x != nil && x.NotifyPartakeLikeRankingListFlag != nil {
		return *x.NotifyPartakeLikeRankingListFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqLightalkSwitch() int32 {
	if x != nil && x.ReqLightalkSwitch != nil {
		return *x.ReqLightalkSwitch
	}
	return 0
}

func (x *D5EBReqBody) GetReqMusicRingVisible() int32 {
	if x != nil && x.ReqMusicRingVisible != nil {
		return *x.ReqMusicRingVisible
	}
	return 0
}

func (x *D5EBReqBody) GetReqMusicRingAutoplay() int32 {
	if x != nil && x.ReqMusicRingAutoplay != nil {
		return *x.ReqMusicRingAutoplay
	}
	return 0
}

func (x *D5EBReqBody) GetReqMusicRingRedpoint() int32 {
	if x != nil && x.ReqMusicRingRedpoint != nil {
		return *x.ReqMusicRingRedpoint
	}
	return 0
}

func (x *D5EBReqBody) GetTorchDisableFlag() int32 {
	if x != nil && x.TorchDisableFlag != nil {
		return *x.TorchDisableFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqVasMagicfontFlag() int32 {
	if x != nil && x.ReqVasMagicfontFlag != nil {
		return *x.ReqVasMagicfontFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqVipFlag() int32 {
	if x != nil && x.ReqVipFlag != nil {
		return *x.ReqVipFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqAuthFlag() int32 {
	if x != nil && x.ReqAuthFlag != nil {
		return *x.ReqAuthFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqForbidFlag() int32 {
	if x != nil && x.ReqForbidFlag != nil {
		return *x.ReqForbidFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqGodForbid() int32 {
	if x != nil && x.ReqGodForbid != nil {
		return *x.ReqGodForbid
	}
	return 0
}

func (x *D5EBReqBody) GetReqGodFlag() int32 {
	if x != nil && x.ReqGodFlag != nil {
		return *x.ReqGodFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqCharmLevel() int32 {
	if x != nil && x.ReqCharmLevel != nil {
		return *x.ReqCharmLevel
	}
	return 0
}

func (x *D5EBReqBody) GetReqCharmShown() int32 {
	if x != nil && x.ReqCharmShown != nil {
		return *x.ReqCharmShown
	}
	return 0
}

func (x *D5EBReqBody) GetReqFreshnewsNotifyFlag() int32 {
	if x != nil && x.ReqFreshnewsNotifyFlag != nil {
		return *x.ReqFreshnewsNotifyFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqApolloVipLevel() int32 {
	if x != nil && x.ReqApolloVipLevel != nil {
		return *x.ReqApolloVipLevel
	}
	return 0
}

func (x *D5EBReqBody) GetReqApolloVipFlag() int32 {
	if x != nil && x.ReqApolloVipFlag != nil {
		return *x.ReqApolloVipFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnC2CVip() int32 {
	if x != nil && x.ReqPstnC2CVip != nil {
		return *x.ReqPstnC2CVip
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnMultiVip() int32 {
	if x != nil && x.ReqPstnMultiVip != nil {
		return *x.ReqPstnMultiVip
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnEverC2CVip() int32 {
	if x != nil && x.ReqPstnEverC2CVip != nil {
		return *x.ReqPstnEverC2CVip
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnEverMultiVip() int32 {
	if x != nil && x.ReqPstnEverMultiVip != nil {
		return *x.ReqPstnEverMultiVip
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnMultiTryFlag() int32 {
	if x != nil && x.ReqPstnMultiTryFlag != nil {
		return *x.ReqPstnMultiTryFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqPstnC2CTryFlag() int32 {
	if x != nil && x.ReqPstnC2CTryFlag != nil {
		return *x.ReqPstnC2CTryFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqSubscribeNearbyassistantSwitch() int32 {
	if x != nil && x.ReqSubscribeNearbyassistantSwitch != nil {
		return *x.ReqSubscribeNearbyassistantSwitch
	}
	return 0
}

func (x *D5EBReqBody) GetReqTorchbearerFlag() int32 {
	if x != nil && x.ReqTorchbearerFlag != nil {
		return *x.ReqTorchbearerFlag
	}
	return 0
}

func (x *D5EBReqBody) GetPreloadDisableFlag() int32 {
	if x != nil && x.PreloadDisableFlag != nil {
		return *x.PreloadDisableFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqMedalwallFlag() int32 {
	if x != nil && x.ReqMedalwallFlag != nil {
		return *x.ReqMedalwallFlag
	}
	return 0
}

func (x *D5EBReqBody) GetNotifyOnLikeRankingListFlag() int32 {
	if x != nil && x.NotifyOnLikeRankingListFlag != nil {
		return *x.NotifyOnLikeRankingListFlag
	}
	return 0
}

func (x *D5EBReqBody) GetReqApolloStatus() int32 {
	if x != nil && x.ReqApolloStatus != nil {
		return *x.ReqApolloStatus
	}
	return 0
}

type D5EBRspBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UinData        []*UdcUinData `protobuf:"bytes,11,rep,name=uinData" json:"uinData,omitempty"`
	UnfinishedUins []int64       `protobuf:"varint,12,rep,name=unfinishedUins" json:"unfinishedUins,omitempty"`
}

func (x *D5EBRspBody) Reset() {
	*x = D5EBRspBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x5eb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D5EBRspBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D5EBRspBody) ProtoMessage() {}

func (x *D5EBRspBody) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x5eb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D5EBRspBody.ProtoReflect.Descriptor instead.
func (*D5EBRspBody) Descriptor() ([]byte, []int) {
	return file_oidb0x5eb_proto_rawDescGZIP(), []int{1}
}

func (x *D5EBRspBody) GetUinData() []*UdcUinData {
	if x != nil {
		return x.UinData
	}
	return nil
}

func (x *D5EBRspBody) GetUnfinishedUins() []int64 {
	if x != nil {
		return x.UnfinishedUins
	}
	return nil
}

type UdcUinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin                              *int64 `protobuf:"varint,1,opt,name=uin" json:"uin,omitempty"`
	Openid                           []byte `protobuf:"bytes,4,opt,name=openid" json:"openid,omitempty"`
	Nick                             []byte `protobuf:"bytes,20002,opt,name=nick" json:"nick,omitempty"`
	Country                          []byte `protobuf:"bytes,20003,opt,name=country" json:"country,omitempty"`
	Province                         []byte `protobuf:"bytes,20004,opt,name=province" json:"province,omitempty"`
	Gender                           *int32 `protobuf:"varint,20009,opt,name=gender" json:"gender,omitempty"`
	Allow                            *int32 `protobuf:"varint,20014,opt,name=allow" json:"allow,omitempty"`
	FaceId                           *int32 `protobuf:"varint,20015,opt,name=faceId" json:"faceId,omitempty"`
	City                             []byte `protobuf:"bytes,20020,opt,name=city" json:"city,omitempty"`
	Constellation                    *int32 `protobuf:"varint,20022,opt,name=constellation" json:"constellation,omitempty"`
	CommonPlace1                     *int32 `protobuf:"varint,20027,opt,name=commonPlace1" json:"commonPlace1,omitempty"`
	Mss3Bitmapextra                  []byte `protobuf:"bytes,20030,opt,name=mss3Bitmapextra" json:"mss3Bitmapextra,omitempty"`
	Birthday                         []byte `protobuf:"bytes,20031,opt,name=birthday" json:"birthday,omitempty"`
	CityId                           []byte `protobuf:"bytes,20032,opt,name=cityId" json:"cityId,omitempty"`
	Lang1                            *int32 `protobuf:"varint,20033,opt,name=lang1" json:"lang1,omitempty"`
	Lang2                            *int32 `protobuf:"varint,20034,opt,name=lang2" json:"lang2,omitempty"`
	Lang3                            *int32 `protobuf:"varint,20035,opt,name=lang3" json:"lang3,omitempty"`
	Age                              *int32 `protobuf:"varint,20037,opt,name=age" json:"age,omitempty"`
	CityZoneId                       *int32 `protobuf:"varint,20041,opt,name=cityZoneId" json:"cityZoneId,omitempty"`
	Oin                              *int32 `protobuf:"varint,20056,opt,name=oin" json:"oin,omitempty"`
	BubbleId                         *int32 `protobuf:"varint,20059,opt,name=bubbleId" json:"bubbleId,omitempty"`
	Mss2Identity                     []byte `protobuf:"bytes,21001,opt,name=mss2Identity" json:"mss2Identity,omitempty"`
	Mss1Service                      []byte `protobuf:"bytes,21002,opt,name=mss1Service" json:"mss1Service,omitempty"`
	Lflag                            *int32 `protobuf:"varint,21003,opt,name=lflag" json:"lflag,omitempty"`
	ExtFlag                          *int32 `protobuf:"varint,21004,opt,name=extFlag" json:"extFlag,omitempty"`
	BasicSvrFlag                     []byte `protobuf:"bytes,21006,opt,name=basicSvrFlag" json:"basicSvrFlag,omitempty"`
	BasicCliFlag                     []byte `protobuf:"bytes,21007,opt,name=basicCliFlag" json:"basicCliFlag,omitempty"`
	FullBirthday                     []byte `protobuf:"bytes,26004,opt,name=fullBirthday" json:"fullBirthday,omitempty"`
	FullAge                          []byte `protobuf:"bytes,26005,opt,name=fullAge" json:"fullAge,omitempty"`
	SimpleUpdateTime                 *int32 `protobuf:"varint,26010,opt,name=simpleUpdateTime" json:"simpleUpdateTime,omitempty"`
	MssUpdateTime                    *int32 `protobuf:"varint,26011,opt,name=mssUpdateTime" json:"mssUpdateTime,omitempty"`
	PstnMultiCallTime                *int32 `protobuf:"varint,26012,opt,name=pstnMultiCallTime" json:"pstnMultiCallTime,omitempty"`
	PstnMultiLastGuideRechargeTime   *int32 `protobuf:"varint,26013,opt,name=pstnMultiLastGuideRechargeTime" json:"pstnMultiLastGuideRechargeTime,omitempty"`
	PstnC2CCallTime                  *int32 `protobuf:"varint,26014,opt,name=pstnC2cCallTime" json:"pstnC2cCallTime,omitempty"`
	PstnC2CLastGuideRechargeTime     *int32 `protobuf:"varint,26015,opt,name=pstnC2cLastGuideRechargeTime" json:"pstnC2cLastGuideRechargeTime,omitempty"`
	GroupMemCreditFlag               *int32 `protobuf:"varint,27022,opt,name=groupMemCreditFlag" json:"groupMemCreditFlag,omitempty"`
	FaceAddonId                      *int64 `protobuf:"varint,27025,opt,name=faceAddonId" json:"faceAddonId,omitempty"`
	MusicGene                        []byte `protobuf:"bytes,27026,opt,name=musicGene" json:"musicGene,omitempty"`
	StrangerNick                     []byte `protobuf:"bytes,27034,opt,name=strangerNick" json:"strangerNick,omitempty"`
	StrangerDeclare                  []byte `protobuf:"bytes,27035,opt,name=strangerDeclare" json:"strangerDeclare,omitempty"`
	LoveStatus                       *int32 `protobuf:"varint,27036,opt,name=loveStatus" json:"loveStatus,omitempty"`
	Profession                       *int32 `protobuf:"varint,27037,opt,name=profession" json:"profession,omitempty"`
	VasColorringId                   *int32 `protobuf:"varint,27041,opt,name=vasColorringId" json:"vasColorringId,omitempty"`
	Charm                            *int32 `protobuf:"varint,27052,opt,name=charm" json:"charm,omitempty"`
	ApolloTimestamp                  *int32 `protobuf:"varint,27059,opt,name=apolloTimestamp" json:"apolloTimestamp,omitempty"`
	VasFontId                        *int32 `protobuf:"varint,27201,opt,name=vasFontId" json:"vasFontId,omitempty"`
	GlobalGroupLevel                 *int32 `protobuf:"varint,27208,opt,name=globalGroupLevel" json:"globalGroupLevel,omitempty"`
	ReqInvite2GroupAutoAgreeFlag     *int32 `protobuf:"varint,40346,opt,name=reqInvite2groupAutoAgreeFlag" json:"reqInvite2groupAutoAgreeFlag,omitempty"`
	SubaccountDisplayThirdQqFlag     *int32 `protobuf:"varint,40348,opt,name=subaccountDisplayThirdQqFlag" json:"subaccountDisplayThirdQqFlag,omitempty"`
	NotifyPartakeLikeRankingListFlag *int32 `protobuf:"varint,40350,opt,name=notifyPartakeLikeRankingListFlag" json:"notifyPartakeLikeRankingListFlag,omitempty"`
	LightalkSwitch                   *int32 `protobuf:"varint,40506,opt,name=lightalkSwitch" json:"lightalkSwitch,omitempty"`
	MusicRingVisible                 *int32 `protobuf:"varint,40507,opt,name=musicRingVisible" json:"musicRingVisible,omitempty"`
	MusicRingAutoplay                *int32 `protobuf:"varint,40508,opt,name=musicRingAutoplay" json:"musicRingAutoplay,omitempty"`
	MusicRingRedpoint                *int32 `protobuf:"varint,40509,opt,name=musicRingRedpoint" json:"musicRingRedpoint,omitempty"`
	TorchDisableFlag                 *int32 `protobuf:"varint,40525,opt,name=torchDisableFlag" json:"torchDisableFlag,omitempty"`
	VasMagicfontFlag                 *int32 `protobuf:"varint,40530,opt,name=vasMagicfontFlag" json:"vasMagicfontFlag,omitempty"`
	VipFlag                          *int32 `protobuf:"varint,41756,opt,name=vipFlag" json:"vipFlag,omitempty"`
	AuthFlag                         *int32 `protobuf:"varint,41783,opt,name=authFlag" json:"authFlag,omitempty"`
	ForbidFlag                       *int32 `protobuf:"varint,41784,opt,name=forbidFlag" json:"forbidFlag,omitempty"`
	GodForbid                        *int32 `protobuf:"varint,41804,opt,name=godForbid" json:"godForbid,omitempty"`
	GodFlag                          *int32 `protobuf:"varint,41805,opt,name=godFlag" json:"godFlag,omitempty"`
	CharmLevel                       *int32 `protobuf:"varint,41950,opt,name=charmLevel" json:"charmLevel,omitempty"`
	CharmShown                       *int32 `protobuf:"varint,41973,opt,name=charmShown" json:"charmShown,omitempty"`
	FreshnewsNotifyFlag              *int32 `protobuf:"varint,41993,opt,name=freshnewsNotifyFlag" json:"freshnewsNotifyFlag,omitempty"`
	ApolloVipLevel                   *int32 `protobuf:"varint,41999,opt,name=apolloVipLevel" json:"apolloVipLevel,omitempty"`
	ApolloVipFlag                    *int32 `protobuf:"varint,42003,opt,name=apolloVipFlag" json:"apolloVipFlag,omitempty"`
	PstnC2CVip                       *int32 `protobuf:"varint,42005,opt,name=pstnC2cVip" json:"pstnC2cVip,omitempty"`
	PstnMultiVip                     *int32 `protobuf:"varint,42006,opt,name=pstnMultiVip" json:"pstnMultiVip,omitempty"`
	PstnEverC2CVip                   *int32 `protobuf:"varint,42007,opt,name=pstnEverC2cVip" json:"pstnEverC2cVip,omitempty"`
	PstnEverMultiVip                 *int32 `protobuf:"varint,42008,opt,name=pstnEverMultiVip" json:"pstnEverMultiVip,omitempty"`
	PstnMultiTryFlag                 *int32 `protobuf:"varint,42011,opt,name=pstnMultiTryFlag" json:"pstnMultiTryFlag,omitempty"`
	PstnC2CTryFlag                   *int32 `protobuf:"varint,42012,opt,name=pstnC2cTryFlag" json:"pstnC2cTryFlag,omitempty"`
	SubscribeNearbyassistantSwitch   *int32 `protobuf:"varint,42024,opt,name=subscribeNearbyassistantSwitch" json:"subscribeNearbyassistantSwitch,omitempty"`
	TorchbearerFlag                  *int32 `protobuf:"varint,42051,opt,name=torchbearerFlag" json:"torchbearerFlag,omitempty"`
	PreloadDisableFlag               *int32 `protobuf:"varint,42073,opt,name=preloadDisableFlag" json:"preloadDisableFlag,omitempty"`
	ReqMedalwallFlag                 *int32 `protobuf:"varint,42075,opt,name=reqMedalwallFlag" json:"reqMedalwallFlag,omitempty"`
	NotifyOnLikeRankingListFlag      *int32 `protobuf:"varint,42092,opt,name=notifyOnLikeRankingListFlag" json:"notifyOnLikeRankingListFlag,omitempty"`
	ApolloStatus                     *int32 `protobuf:"varint,42980,opt,name=apolloStatus" json:"apolloStatus,omitempty"`
}

func (x *UdcUinData) Reset() {
	*x = UdcUinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oidb0x5eb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdcUinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdcUinData) ProtoMessage() {}

func (x *UdcUinData) ProtoReflect() protoreflect.Message {
	mi := &file_oidb0x5eb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdcUinData.ProtoReflect.Descriptor instead.
func (*UdcUinData) Descriptor() ([]byte, []int) {
	return file_oidb0x5eb_proto_rawDescGZIP(), []int{2}
}

func (x *UdcUinData) GetUin() int64 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *UdcUinData) GetOpenid() []byte {
	if x != nil {
		return x.Openid
	}
	return nil
}

func (x *UdcUinData) GetNick() []byte {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *UdcUinData) GetCountry() []byte {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *UdcUinData) GetProvince() []byte {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *UdcUinData) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *UdcUinData) GetAllow() int32 {
	if x != nil && x.Allow != nil {
		return *x.Allow
	}
	return 0
}

func (x *UdcUinData) GetFaceId() int32 {
	if x != nil && x.FaceId != nil {
		return *x.FaceId
	}
	return 0
}

func (x *UdcUinData) GetCity() []byte {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *UdcUinData) GetConstellation() int32 {
	if x != nil && x.Constellation != nil {
		return *x.Constellation
	}
	return 0
}

func (x *UdcUinData) GetCommonPlace1() int32 {
	if x != nil && x.CommonPlace1 != nil {
		return *x.CommonPlace1
	}
	return 0
}

func (x *UdcUinData) GetMss3Bitmapextra() []byte {
	if x != nil {
		return x.Mss3Bitmapextra
	}
	return nil
}

func (x *UdcUinData) GetBirthday() []byte {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UdcUinData) GetCityId() []byte {
	if x != nil {
		return x.CityId
	}
	return nil
}

func (x *UdcUinData) GetLang1() int32 {
	if x != nil && x.Lang1 != nil {
		return *x.Lang1
	}
	return 0
}

func (x *UdcUinData) GetLang2() int32 {
	if x != nil && x.Lang2 != nil {
		return *x.Lang2
	}
	return 0
}

func (x *UdcUinData) GetLang3() int32 {
	if x != nil && x.Lang3 != nil {
		return *x.Lang3
	}
	return 0
}

func (x *UdcUinData) GetAge() int32 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *UdcUinData) GetCityZoneId() int32 {
	if x != nil && x.CityZoneId != nil {
		return *x.CityZoneId
	}
	return 0
}

func (x *UdcUinData) GetOin() int32 {
	if x != nil && x.Oin != nil {
		return *x.Oin
	}
	return 0
}

func (x *UdcUinData) GetBubbleId() int32 {
	if x != nil && x.BubbleId != nil {
		return *x.BubbleId
	}
	return 0
}

func (x *UdcUinData) GetMss2Identity() []byte {
	if x != nil {
		return x.Mss2Identity
	}
	return nil
}

func (x *UdcUinData) GetMss1Service() []byte {
	if x != nil {
		return x.Mss1Service
	}
	return nil
}

func (x *UdcUinData) GetLflag() int32 {
	if x != nil && x.Lflag != nil {
		return *x.Lflag
	}
	return 0
}

func (x *UdcUinData) GetExtFlag() int32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *UdcUinData) GetBasicSvrFlag() []byte {
	if x != nil {
		return x.BasicSvrFlag
	}
	return nil
}

func (x *UdcUinData) GetBasicCliFlag() []byte {
	if x != nil {
		return x.BasicCliFlag
	}
	return nil
}

func (x *UdcUinData) GetFullBirthday() []byte {
	if x != nil {
		return x.FullBirthday
	}
	return nil
}

func (x *UdcUinData) GetFullAge() []byte {
	if x != nil {
		return x.FullAge
	}
	return nil
}

func (x *UdcUinData) GetSimpleUpdateTime() int32 {
	if x != nil && x.SimpleUpdateTime != nil {
		return *x.SimpleUpdateTime
	}
	return 0
}

func (x *UdcUinData) GetMssUpdateTime() int32 {
	if x != nil && x.MssUpdateTime != nil {
		return *x.MssUpdateTime
	}
	return 0
}

func (x *UdcUinData) GetPstnMultiCallTime() int32 {
	if x != nil && x.PstnMultiCallTime != nil {
		return *x.PstnMultiCallTime
	}
	return 0
}

func (x *UdcUinData) GetPstnMultiLastGuideRechargeTime() int32 {
	if x != nil && x.PstnMultiLastGuideRechargeTime != nil {
		return *x.PstnMultiLastGuideRechargeTime
	}
	return 0
}

func (x *UdcUinData) GetPstnC2CCallTime() int32 {
	if x != nil && x.PstnC2CCallTime != nil {
		return *x.PstnC2CCallTime
	}
	return 0
}

func (x *UdcUinData) GetPstnC2CLastGuideRechargeTime() int32 {
	if x != nil && x.PstnC2CLastGuideRechargeTime != nil {
		return *x.PstnC2CLastGuideRechargeTime
	}
	return 0
}

func (x *UdcUinData) GetGroupMemCreditFlag() int32 {
	if x != nil && x.GroupMemCreditFlag != nil {
		return *x.GroupMemCreditFlag
	}
	return 0
}

func (x *UdcUinData) GetFaceAddonId() int64 {
	if x != nil && x.FaceAddonId != nil {
		return *x.FaceAddonId
	}
	return 0
}

func (x *UdcUinData) GetMusicGene() []byte {
	if x != nil {
		return x.MusicGene
	}
	return nil
}

func (x *UdcUinData) GetStrangerNick() []byte {
	if x != nil {
		return x.StrangerNick
	}
	return nil
}

func (x *UdcUinData) GetStrangerDeclare() []byte {
	if x != nil {
		return x.StrangerDeclare
	}
	return nil
}

func (x *UdcUinData) GetLoveStatus() int32 {
	if x != nil && x.LoveStatus != nil {
		return *x.LoveStatus
	}
	return 0
}

func (x *UdcUinData) GetProfession() int32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *UdcUinData) GetVasColorringId() int32 {
	if x != nil && x.VasColorringId != nil {
		return *x.VasColorringId
	}
	return 0
}

func (x *UdcUinData) GetCharm() int32 {
	if x != nil && x.Charm != nil {
		return *x.Charm
	}
	return 0
}

func (x *UdcUinData) GetApolloTimestamp() int32 {
	if x != nil && x.ApolloTimestamp != nil {
		return *x.ApolloTimestamp
	}
	return 0
}

func (x *UdcUinData) GetVasFontId() int32 {
	if x != nil && x.VasFontId != nil {
		return *x.VasFontId
	}
	return 0
}

func (x *UdcUinData) GetGlobalGroupLevel() int32 {
	if x != nil && x.GlobalGroupLevel != nil {
		return *x.GlobalGroupLevel
	}
	return 0
}

func (x *UdcUinData) GetReqInvite2GroupAutoAgreeFlag() int32 {
	if x != nil && x.ReqInvite2GroupAutoAgreeFlag != nil {
		return *x.ReqInvite2GroupAutoAgreeFlag
	}
	return 0
}

func (x *UdcUinData) GetSubaccountDisplayThirdQqFlag() int32 {
	if x != nil && x.SubaccountDisplayThirdQqFlag != nil {
		return *x.SubaccountDisplayThirdQqFlag
	}
	return 0
}

func (x *UdcUinData) GetNotifyPartakeLikeRankingListFlag() int32 {
	if x != nil && x.NotifyPartakeLikeRankingListFlag != nil {
		return *x.NotifyPartakeLikeRankingListFlag
	}
	return 0
}

func (x *UdcUinData) GetLightalkSwitch() int32 {
	if x != nil && x.LightalkSwitch != nil {
		return *x.LightalkSwitch
	}
	return 0
}

func (x *UdcUinData) GetMusicRingVisible() int32 {
	if x != nil && x.MusicRingVisible != nil {
		return *x.MusicRingVisible
	}
	return 0
}

func (x *UdcUinData) GetMusicRingAutoplay() int32 {
	if x != nil && x.MusicRingAutoplay != nil {
		return *x.MusicRingAutoplay
	}
	return 0
}

func (x *UdcUinData) GetMusicRingRedpoint() int32 {
	if x != nil && x.MusicRingRedpoint != nil {
		return *x.MusicRingRedpoint
	}
	return 0
}

func (x *UdcUinData) GetTorchDisableFlag() int32 {
	if x != nil && x.TorchDisableFlag != nil {
		return *x.TorchDisableFlag
	}
	return 0
}

func (x *UdcUinData) GetVasMagicfontFlag() int32 {
	if x != nil && x.VasMagicfontFlag != nil {
		return *x.VasMagicfontFlag
	}
	return 0
}

func (x *UdcUinData) GetVipFlag() int32 {
	if x != nil && x.VipFlag != nil {
		return *x.VipFlag
	}
	return 0
}

func (x *UdcUinData) GetAuthFlag() int32 {
	if x != nil && x.AuthFlag != nil {
		return *x.AuthFlag
	}
	return 0
}

func (x *UdcUinData) GetForbidFlag() int32 {
	if x != nil && x.ForbidFlag != nil {
		return *x.ForbidFlag
	}
	return 0
}

func (x *UdcUinData) GetGodForbid() int32 {
	if x != nil && x.GodForbid != nil {
		return *x.GodForbid
	}
	return 0
}

func (x *UdcUinData) GetGodFlag() int32 {
	if x != nil && x.GodFlag != nil {
		return *x.GodFlag
	}
	return 0
}

func (x *UdcUinData) GetCharmLevel() int32 {
	if x != nil && x.CharmLevel != nil {
		return *x.CharmLevel
	}
	return 0
}

func (x *UdcUinData) GetCharmShown() int32 {
	if x != nil && x.CharmShown != nil {
		return *x.CharmShown
	}
	return 0
}

func (x *UdcUinData) GetFreshnewsNotifyFlag() int32 {
	if x != nil && x.FreshnewsNotifyFlag != nil {
		return *x.FreshnewsNotifyFlag
	}
	return 0
}

func (x *UdcUinData) GetApolloVipLevel() int32 {
	if x != nil && x.ApolloVipLevel != nil {
		return *x.ApolloVipLevel
	}
	return 0
}

func (x *UdcUinData) GetApolloVipFlag() int32 {
	if x != nil && x.ApolloVipFlag != nil {
		return *x.ApolloVipFlag
	}
	return 0
}

func (x *UdcUinData) GetPstnC2CVip() int32 {
	if x != nil && x.PstnC2CVip != nil {
		return *x.PstnC2CVip
	}
	return 0
}

func (x *UdcUinData) GetPstnMultiVip() int32 {
	if x != nil && x.PstnMultiVip != nil {
		return *x.PstnMultiVip
	}
	return 0
}

func (x *UdcUinData) GetPstnEverC2CVip() int32 {
	if x != nil && x.PstnEverC2CVip != nil {
		return *x.PstnEverC2CVip
	}
	return 0
}

func (x *UdcUinData) GetPstnEverMultiVip() int32 {
	if x != nil && x.PstnEverMultiVip != nil {
		return *x.PstnEverMultiVip
	}
	return 0
}

func (x *UdcUinData) GetPstnMultiTryFlag() int32 {
	if x != nil && x.PstnMultiTryFlag != nil {
		return *x.PstnMultiTryFlag
	}
	return 0
}

func (x *UdcUinData) GetPstnC2CTryFlag() int32 {
	if x != nil && x.PstnC2CTryFlag != nil {
		return *x.PstnC2CTryFlag
	}
	return 0
}

func (x *UdcUinData) GetSubscribeNearbyassistantSwitch() int32 {
	if x != nil && x.SubscribeNearbyassistantSwitch != nil {
		return *x.SubscribeNearbyassistantSwitch
	}
	return 0
}

func (x *UdcUinData) GetTorchbearerFlag() int32 {
	if x != nil && x.TorchbearerFlag != nil {
		return *x.TorchbearerFlag
	}
	return 0
}

func (x *UdcUinData) GetPreloadDisableFlag() int32 {
	if x != nil && x.PreloadDisableFlag != nil {
		return *x.PreloadDisableFlag
	}
	return 0
}

func (x *UdcUinData) GetReqMedalwallFlag() int32 {
	if x != nil && x.ReqMedalwallFlag != nil {
		return *x.ReqMedalwallFlag
	}
	return 0
}

func (x *UdcUinData) GetNotifyOnLikeRankingListFlag() int32 {
	if x != nil && x.NotifyOnLikeRankingListFlag != nil {
		return *x.NotifyOnLikeRankingListFlag
	}
	return 0
}

func (x *UdcUinData) GetApolloStatus() int32 {
	if x != nil && x.ApolloStatus != nil {
		return *x.ApolloStatus
	}
	return 0
}

var File_oidb0x5eb_proto protoreflect.FileDescriptor

var file_oidb0x5eb_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x69, 0x64, 0x62, 0x30, 0x78, 0x35, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xdb, 0x1b, 0x0a, 0x0b, 0x44, 0x35, 0x45, 0x42, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x04, 0x75, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0xa2, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xa3, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0xa4, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0xa9, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0xae, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0xaf, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x43, 0x69, 0x74, 0x79, 0x18, 0xb4, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb6, 0x9c,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x31, 0x18, 0xbb, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x31, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x33, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xbe, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x33, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0xbf, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0xc0, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x4c, 0x61, 0x6e, 0x67, 0x31, 0x18, 0xc1, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x4c, 0x61, 0x6e, 0x67, 0x31, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4c, 0x61,
	0x6e, 0x67, 0x32, 0x18, 0xc2, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x4c, 0x61, 0x6e, 0x67, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x4c, 0x61, 0x6e, 0x67,
	0x33, 0x18, 0xc3, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4c, 0x61,
	0x6e, 0x67, 0x33, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x41, 0x67, 0x65, 0x18, 0xc5, 0x9c,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x71, 0x41, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0xc9,
	0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x43, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4f, 0x69, 0x6e, 0x18,
	0xd8, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4f, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0xdb,
	0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x32, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x89, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x32, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x31, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x8a, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x4d, 0x73,
	0x73, 0x31, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x4c, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x8b, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x4c, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x45, 0x78,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8c, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x45, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x76, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8e, 0xa4, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x76,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6c, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8f, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6c, 0x69, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x94, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x20, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x18, 0x95, 0xcb, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9a, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9b, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9c, 0xcb, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x50, 0x73,
	0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9d, 0xcb, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x50, 0x73,
	0x74, 0x6e, 0x43, 0x32, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9e, 0xcb,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x43, 0x32,
	0x63, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x1f, 0x72, 0x65, 0x71,
	0x50, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9f, 0xcb, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63,
	0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8e,
	0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x46, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x91, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x46, 0x61, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x18, 0x92, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x2a, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x18, 0x9a, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x53, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x18,
	0x9b, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x71, 0x53, 0x74, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x72,
	0x65, 0x71, 0x4c, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x9c, 0xd3, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x4c, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9d, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x56, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0xa1, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x71, 0x56,
	0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x18, 0xac, 0xd3, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x12, 0x30, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0xb3, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2c, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x56, 0x61, 0x73, 0x46, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0xc1, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x71,
	0x56, 0x61, 0x73, 0x46, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0xc8, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x44, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x32, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x9a, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x32, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4a, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x53, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x51, 0x71, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x9c, 0xbb, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1f, 0x72, 0x65, 0x71, 0x53, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x68, 0x69, 0x72, 0x64, 0x51, 0x71, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x4c, 0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x9e, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x61, 0x6c, 0x6b,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xba, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e,
	0x67, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0xbb, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x52, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0xbc, 0xbc,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x71, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0xbd, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x71,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xcd, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74,
	0x6f, 0x72, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x32, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x56, 0x61, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x6f,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xd2, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x56, 0x61, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x6f, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x69, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x9c, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x69,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x41, 0x75, 0x74, 0x68,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0xb7, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xb8, 0xc6, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x24, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x47, 0x6f, 0x64, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x18, 0xcc, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x47, 0x6f,
	0x64, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x47, 0x6f,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xcd, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x47, 0x6f, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xde, 0xc7, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x68, 0x6f,
	0x77, 0x6e, 0x18, 0xf5, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x43,
	0x68, 0x61, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x71,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x89, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x71,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f,
	0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x8f, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x56, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f,
	0x56, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x93, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x56, 0x69, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x56,
	0x69, 0x70, 0x18, 0x95, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x50,
	0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x56, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x50, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x69, 0x70, 0x18, 0x96, 0xc8, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x56, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e,
	0x45, 0x76, 0x65, 0x72, 0x43, 0x32, 0x63, 0x56, 0x69, 0x70, 0x18, 0x97, 0xc8, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x43,
	0x32, 0x63, 0x56, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e,
	0x45, 0x76, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x69, 0x70, 0x18, 0x98, 0xc8, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x45, 0x76, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x71,
	0x50, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x9b, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x50, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x54, 0x72, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x9c, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x71, 0x50,
	0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4e, 0x0a,
	0x21, 0x72, 0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0xa8, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x72, 0x65, 0x71, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0xc3, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x54, 0x6f, 0x72, 0x63, 0x68, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x30, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xd9, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2c, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x77, 0x61, 0x6c,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xdb, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x42, 0x0a, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x4c, 0x69, 0x6b, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xec,
	0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e,
	0x4c, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xe4, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x41, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x5c, 0x0a, 0x0b, 0x44, 0x35, 0x45, 0x42, 0x52, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x25,
	0x0a, 0x07, 0x75, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x55, 0x64, 0x63, 0x55, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x75,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x22, 0xe8, 0x17,
	0x0a, 0x0a, 0x55, 0x64, 0x63, 0x55, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0xa2,
	0x9c, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xa3, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0xa4, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0xa9, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0xae, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0xaf, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0xb4, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb6, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x31,
	0x18, 0xbb, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x31, 0x12, 0x2a, 0x0a, 0x0f, 0x6d, 0x73, 0x73, 0x33, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xbe, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6d, 0x73, 0x73, 0x33, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x1c, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0xbf,
	0x9c, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x12, 0x18, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0xc0, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61,
	0x6e, 0x67, 0x31, 0x18, 0xc1, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x6e,
	0x67, 0x31, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x32, 0x18, 0xc2, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61,
	0x6e, 0x67, 0x33, 0x18, 0xc3, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x6e,
	0x67, 0x33, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0xc5, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0xc9, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x6f, 0x69, 0x6e, 0x18,
	0xd8, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x08,
	0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0xdb, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x73,
	0x73, 0x32, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x89, 0xa4, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x73, 0x73, 0x32, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0b, 0x6d, 0x73, 0x73, 0x31, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x8a, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x73, 0x73, 0x31, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x8b, 0xa4,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x07,
	0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8c, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x53, 0x76, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8e, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x76, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6c, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8f,
	0xa4, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6c, 0x69,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x94, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x75,
	0x6c, 0x6c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x75,
	0x6c, 0x6c, 0x41, 0x67, 0x65, 0x18, 0x95, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66,
	0x75, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9a, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6d, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9b, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x11,
	0x70, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x9c, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x73, 0x74, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x1e,
	0x70, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9d,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32,
	0x63, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9e, 0xcb, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x4c, 0x61, 0x73,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x9f, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x73, 0x74, 0x6e,
	0x43, 0x32, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x8e,
	0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x91, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x18, 0x92, 0xd3, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x9a,
	0xd3, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x18, 0x9b, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x6c, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x9c,
	0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x9d, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0e, 0x76, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0xa1, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x61, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x18, 0xac, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x0f, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xb3, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x76, 0x61, 0x73, 0x46, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0xc1, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x73, 0x46, 0x6f, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xc8, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x44, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x32, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x9a, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x32, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x44, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x51, 0x71, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x9c, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x68, 0x69, 0x72, 0x64, 0x51, 0x71, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4c, 0x0a, 0x20,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x9e, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xba, 0xbc, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x10, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e,
	0x67, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0xbb, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0xbc, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xbd, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xcd, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x74, 0x6f, 0x72, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2c, 0x0a, 0x10, 0x76, 0x61, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x6f, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0xd2, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x61,
	0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x07, 0x76, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x9c, 0xc6, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xb7, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xb8, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x09, 0x67, 0x6f,
	0x64, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x18, 0xcc, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x6f, 0x64, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x6f,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xcd, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x6f, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0xde, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x6d, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0xf5, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x6e, 0x65, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x89, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x6e, 0x65, 0x77, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x0e, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x8f, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f,
	0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x61, 0x70, 0x6f, 0x6c,
	0x6c, 0x6f, 0x56, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x93, 0xc8, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x56, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0a, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x56, 0x69, 0x70, 0x18, 0x95,
	0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x56,
	0x69, 0x70, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56,
	0x69, 0x70, 0x18, 0x96, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x73, 0x74, 0x6e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x0e, 0x70, 0x73, 0x74, 0x6e,
	0x45, 0x76, 0x65, 0x72, 0x43, 0x32, 0x63, 0x56, 0x69, 0x70, 0x18, 0x97, 0xc8, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x70, 0x73, 0x74, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x43, 0x32, 0x63, 0x56,
	0x69, 0x70, 0x12, 0x2c, 0x0a, 0x10, 0x70, 0x73, 0x74, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x56, 0x69, 0x70, 0x18, 0x98, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x73, 0x74, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x69, 0x70,
	0x12, 0x2c, 0x0a, 0x10, 0x70, 0x73, 0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x9b, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x73,
	0x74, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x0e, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32, 0x63, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x9c, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x73, 0x74, 0x6e, 0x43, 0x32,
	0x63, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x48, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xa8, 0xc8, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xc3, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74,
	0x6f, 0x72, 0x63, 0x68, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0xd9, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2c, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0xdb, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x77, 0x61, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x42,
	0x0a, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0xec, 0xc8,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x70, 0x6f, 0x6c, 0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0xe4, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x6f, 0x6c,
	0x6c, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x6f, 0x69,
	0x64, 0x62,
}

var (
	file_oidb0x5eb_proto_rawDescOnce sync.Once
	file_oidb0x5eb_proto_rawDescData = file_oidb0x5eb_proto_rawDesc
)

func file_oidb0x5eb_proto_rawDescGZIP() []byte {
	file_oidb0x5eb_proto_rawDescOnce.Do(func() {
		file_oidb0x5eb_proto_rawDescData = protoimpl.X.CompressGZIP(file_oidb0x5eb_proto_rawDescData)
	})
	return file_oidb0x5eb_proto_rawDescData
}

var file_oidb0x5eb_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_oidb0x5eb_proto_goTypes = []interface{}{
	(*D5EBReqBody)(nil), // 0: D5EBReqBody
	(*D5EBRspBody)(nil), // 1: D5EBRspBody
	(*UdcUinData)(nil),  // 2: UdcUinData
}
var file_oidb0x5eb_proto_depIdxs = []int32{
	2, // 0: D5EBRspBody.uinData:type_name -> UdcUinData
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_oidb0x5eb_proto_init() }
func file_oidb0x5eb_proto_init() {
	if File_oidb0x5eb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oidb0x5eb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D5EBReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x5eb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D5EBRspBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oidb0x5eb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdcUinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oidb0x5eb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oidb0x5eb_proto_goTypes,
		DependencyIndexes: file_oidb0x5eb_proto_depIdxs,
		MessageInfos:      file_oidb0x5eb_proto_msgTypes,
	}.Build()
	File_oidb0x5eb_proto = out.File
	file_oidb0x5eb_proto_rawDesc = nil
	file_oidb0x5eb_proto_goTypes = nil
	file_oidb0x5eb_proto_depIdxs = nil
}
