// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: register_proxy.proto

package msf

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DiscussList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscussCode *uint64 `protobuf:"varint,1,opt,name=discussCode" json:"discussCode,omitempty"`
	DiscussSeq  *uint64 `protobuf:"varint,2,opt,name=discussSeq" json:"discussSeq,omitempty"`
	MemberSeq   *uint64 `protobuf:"varint,3,opt,name=memberSeq" json:"memberSeq,omitempty"`
	InfoSeq     *uint64 `protobuf:"varint,4,opt,name=infoSeq" json:"infoSeq,omitempty"`
	BHotGroup   *bool   `protobuf:"varint,5,opt,name=bHotGroup" json:"bHotGroup,omitempty"`
	RedpackTime *uint64 `protobuf:"varint,6,opt,name=redpackTime" json:"redpackTime,omitempty"`
	HasMsg      *bool   `protobuf:"varint,7,opt,name=hasMsg" json:"hasMsg,omitempty"`
	DicussFlag  *int64  `protobuf:"varint,8,opt,name=dicussFlag" json:"dicussFlag,omitempty"`
}

func (x *DiscussList) Reset() {
	*x = DiscussList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscussList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscussList) ProtoMessage() {}

func (x *DiscussList) ProtoReflect() protoreflect.Message {
	mi := &file_register_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscussList.ProtoReflect.Descriptor instead.
func (*DiscussList) Descriptor() ([]byte, []int) {
	return file_register_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *DiscussList) GetDiscussCode() uint64 {
	if x != nil && x.DiscussCode != nil {
		return *x.DiscussCode
	}
	return 0
}

func (x *DiscussList) GetDiscussSeq() uint64 {
	if x != nil && x.DiscussSeq != nil {
		return *x.DiscussSeq
	}
	return 0
}

func (x *DiscussList) GetMemberSeq() uint64 {
	if x != nil && x.MemberSeq != nil {
		return *x.MemberSeq
	}
	return 0
}

func (x *DiscussList) GetInfoSeq() uint64 {
	if x != nil && x.InfoSeq != nil {
		return *x.InfoSeq
	}
	return 0
}

func (x *DiscussList) GetBHotGroup() bool {
	if x != nil && x.BHotGroup != nil {
		return *x.BHotGroup
	}
	return false
}

func (x *DiscussList) GetRedpackTime() uint64 {
	if x != nil && x.RedpackTime != nil {
		return *x.RedpackTime
	}
	return 0
}

func (x *DiscussList) GetHasMsg() bool {
	if x != nil && x.HasMsg != nil {
		return *x.HasMsg
	}
	return false
}

func (x *DiscussList) GetDicussFlag() int64 {
	if x != nil && x.DicussFlag != nil {
		return *x.DicussFlag
	}
	return 0
}

type GroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode             *uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode,omitempty"`
	GroupSeq              *uint64 `protobuf:"varint,2,opt,name=groupSeq" json:"groupSeq,omitempty"`
	MemberSeq             *uint64 `protobuf:"varint,3,opt,name=memberSeq" json:"memberSeq,omitempty"`
	Mask                  *uint64 `protobuf:"varint,4,opt,name=mask" json:"mask,omitempty"`
	RedpackTime           *uint64 `protobuf:"varint,5,opt,name=redpackTime" json:"redpackTime,omitempty"`
	HasMsg                *bool   `protobuf:"varint,6,opt,name=hasMsg" json:"hasMsg,omitempty"`
	GroupFlag             *int64  `protobuf:"varint,7,opt,name=groupFlag" json:"groupFlag,omitempty"`
	GroupType             *uint64 `protobuf:"varint,8,opt,name=groupType" json:"groupType,omitempty"`
	GroupNameSeq          *uint32 `protobuf:"varint,9,opt,name=groupNameSeq" json:"groupNameSeq,omitempty"`
	GroupMemberSeq        *uint32 `protobuf:"varint,10,opt,name=groupMemberSeq" json:"groupMemberSeq,omitempty"`
	UinFlagEx2            *uint32 `protobuf:"varint,11,opt,name=uinFlagEx2" json:"uinFlagEx2,omitempty"`
	ImportantMsgLatestSeq *uint32 `protobuf:"varint,12,opt,name=importantMsgLatestSeq" json:"importantMsgLatestSeq,omitempty"`
}

func (x *GroupList) Reset() {
	*x = GroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupList) ProtoMessage() {}

func (x *GroupList) ProtoReflect() protoreflect.Message {
	mi := &file_register_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupList.ProtoReflect.Descriptor instead.
func (*GroupList) Descriptor() ([]byte, []int) {
	return file_register_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *GroupList) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *GroupList) GetGroupSeq() uint64 {
	if x != nil && x.GroupSeq != nil {
		return *x.GroupSeq
	}
	return 0
}

func (x *GroupList) GetMemberSeq() uint64 {
	if x != nil && x.MemberSeq != nil {
		return *x.MemberSeq
	}
	return 0
}

func (x *GroupList) GetMask() uint64 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

func (x *GroupList) GetRedpackTime() uint64 {
	if x != nil && x.RedpackTime != nil {
		return *x.RedpackTime
	}
	return 0
}

func (x *GroupList) GetHasMsg() bool {
	if x != nil && x.HasMsg != nil {
		return *x.HasMsg
	}
	return false
}

func (x *GroupList) GetGroupFlag() int64 {
	if x != nil && x.GroupFlag != nil {
		return *x.GroupFlag
	}
	return 0
}

func (x *GroupList) GetGroupType() uint64 {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return 0
}

func (x *GroupList) GetGroupNameSeq() uint32 {
	if x != nil && x.GroupNameSeq != nil {
		return *x.GroupNameSeq
	}
	return 0
}

func (x *GroupList) GetGroupMemberSeq() uint32 {
	if x != nil && x.GroupMemberSeq != nil {
		return *x.GroupMemberSeq
	}
	return 0
}

func (x *GroupList) GetUinFlagEx2() uint32 {
	if x != nil && x.UinFlagEx2 != nil {
		return *x.UinFlagEx2
	}
	return 0
}

func (x *GroupList) GetImportantMsgLatestSeq() uint32 {
	if x != nil && x.ImportantMsgLatestSeq != nil {
		return *x.ImportantMsgLatestSeq
	}
	return 0
}

type SvcPbResponsePullDisMsgProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberSeq *uint64 `protobuf:"varint,1,opt,name=memberSeq" json:"memberSeq,omitempty"`
	Content   []byte  `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *SvcPbResponsePullDisMsgProxy) Reset() {
	*x = SvcPbResponsePullDisMsgProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcPbResponsePullDisMsgProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcPbResponsePullDisMsgProxy) ProtoMessage() {}

func (x *SvcPbResponsePullDisMsgProxy) ProtoReflect() protoreflect.Message {
	mi := &file_register_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcPbResponsePullDisMsgProxy.ProtoReflect.Descriptor instead.
func (*SvcPbResponsePullDisMsgProxy) Descriptor() ([]byte, []int) {
	return file_register_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *SvcPbResponsePullDisMsgProxy) GetMemberSeq() uint64 {
	if x != nil && x.MemberSeq != nil {
		return *x.MemberSeq
	}
	return 0
}

func (x *SvcPbResponsePullDisMsgProxy) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SvcRegisterProxyMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *uint32                           `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ErrMsg          []byte                            `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	Flag            *uint32                           `protobuf:"varint,3,opt,name=flag" json:"flag,omitempty"`
	Seq             *uint32                           `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	Info            *SvcResponseMsgInfo               `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	GroupList       []*GroupList                      `protobuf:"bytes,6,rep,name=groupList" json:"groupList,omitempty"`
	DiscussList     []*DiscussList                    `protobuf:"bytes,7,rep,name=discussList" json:"discussList,omitempty"`
	GroupMsg        []*SvcResponsePbPullGroupMsgProxy `protobuf:"bytes,8,rep,name=groupMsg" json:"groupMsg,omitempty"`
	DiscussMsg      []*SvcPbResponsePullDisMsgProxy   `protobuf:"bytes,9,rep,name=discussMsg" json:"discussMsg,omitempty"`
	C2CMsg          []byte                            `protobuf:"bytes,10,opt,name=c2CMsg" json:"c2CMsg,omitempty"`
	PubAccountMsg   []byte                            `protobuf:"bytes,11,opt,name=pubAccountMsg" json:"pubAccountMsg,omitempty"`
	DiscussListFlag *uint32                           `protobuf:"varint,12,opt,name=discussListFlag" json:"discussListFlag,omitempty"`
}

func (x *SvcRegisterProxyMsgResp) Reset() {
	*x = SvcRegisterProxyMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcRegisterProxyMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcRegisterProxyMsgResp) ProtoMessage() {}

func (x *SvcRegisterProxyMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_register_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcRegisterProxyMsgResp.ProtoReflect.Descriptor instead.
func (*SvcRegisterProxyMsgResp) Descriptor() ([]byte, []int) {
	return file_register_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *SvcRegisterProxyMsgResp) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *SvcRegisterProxyMsgResp) GetErrMsg() []byte {
	if x != nil {
		return x.ErrMsg
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *SvcRegisterProxyMsgResp) GetSeq() uint32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *SvcRegisterProxyMsgResp) GetInfo() *SvcResponseMsgInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetGroupList() []*GroupList {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetDiscussList() []*DiscussList {
	if x != nil {
		return x.DiscussList
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetGroupMsg() []*SvcResponsePbPullGroupMsgProxy {
	if x != nil {
		return x.GroupMsg
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetDiscussMsg() []*SvcPbResponsePullDisMsgProxy {
	if x != nil {
		return x.DiscussMsg
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetC2CMsg() []byte {
	if x != nil {
		return x.C2CMsg
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetPubAccountMsg() []byte {
	if x != nil {
		return x.PubAccountMsg
	}
	return nil
}

func (x *SvcRegisterProxyMsgResp) GetDiscussListFlag() uint32 {
	if x != nil && x.DiscussListFlag != nil {
		return *x.DiscussListFlag
	}
	return 0
}

type SvcResponseMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupNum   *uint32 `protobuf:"varint,1,opt,name=groupNum" json:"groupNum,omitempty"`
	DiscussNum *uint32 `protobuf:"varint,2,opt,name=discussNum" json:"discussNum,omitempty"`
}

func (x *SvcResponseMsgInfo) Reset() {
	*x = SvcResponseMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcResponseMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcResponseMsgInfo) ProtoMessage() {}

func (x *SvcResponseMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_register_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcResponseMsgInfo.ProtoReflect.Descriptor instead.
func (*SvcResponseMsgInfo) Descriptor() ([]byte, []int) {
	return file_register_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *SvcResponseMsgInfo) GetGroupNum() uint32 {
	if x != nil && x.GroupNum != nil {
		return *x.GroupNum
	}
	return 0
}

func (x *SvcResponseMsgInfo) GetDiscussNum() uint32 {
	if x != nil && x.DiscussNum != nil {
		return *x.DiscussNum
	}
	return 0
}

type SvcResponsePbPullGroupMsgProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberSeq *uint64 `protobuf:"varint,1,opt,name=memberSeq" json:"memberSeq,omitempty"`
	Content   []byte  `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *SvcResponsePbPullGroupMsgProxy) Reset() {
	*x = SvcResponsePbPullGroupMsgProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcResponsePbPullGroupMsgProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcResponsePbPullGroupMsgProxy) ProtoMessage() {}

func (x *SvcResponsePbPullGroupMsgProxy) ProtoReflect() protoreflect.Message {
	mi := &file_register_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcResponsePbPullGroupMsgProxy.ProtoReflect.Descriptor instead.
func (*SvcResponsePbPullGroupMsgProxy) Descriptor() ([]byte, []int) {
	return file_register_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *SvcResponsePbPullGroupMsgProxy) GetMemberSeq() uint64 {
	if x != nil && x.MemberSeq != nil {
		return *x.MemberSeq
	}
	return 0
}

func (x *SvcResponsePbPullGroupMsgProxy) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_register_proxy_proto protoreflect.FileDescriptor

var file_register_proxy_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x63, 0x75, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x75, 0x73, 0x73, 0x53, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x48, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x75,
	0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69,
	0x63, 0x75, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x8f, 0x03, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x45,
	0x78, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x45, 0x78, 0x32, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x22, 0x56, 0x0a, 0x1c, 0x53, 0x76,
	0x63, 0x50, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x44,
	0x69, 0x73, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xd6, 0x03, 0x0a, 0x17, 0x53, 0x76, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x76, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x62, 0x50, 0x75, 0x6c, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4d,
	0x73, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x76, 0x63, 0x50, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x50, 0x0a, 0x12, 0x53,
	0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x58, 0x0a,
	0x1e, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x62, 0x50, 0x75,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x6d, 0x73, 0x66,
}

var (
	file_register_proxy_proto_rawDescOnce sync.Once
	file_register_proxy_proto_rawDescData = file_register_proxy_proto_rawDesc
)

func file_register_proxy_proto_rawDescGZIP() []byte {
	file_register_proxy_proto_rawDescOnce.Do(func() {
		file_register_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_register_proxy_proto_rawDescData)
	})
	return file_register_proxy_proto_rawDescData
}

var file_register_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_register_proxy_proto_goTypes = []interface{}{
	(*DiscussList)(nil),                    // 0: DiscussList
	(*GroupList)(nil),                      // 1: GroupList
	(*SvcPbResponsePullDisMsgProxy)(nil),   // 2: SvcPbResponsePullDisMsgProxy
	(*SvcRegisterProxyMsgResp)(nil),        // 3: SvcRegisterProxyMsgResp
	(*SvcResponseMsgInfo)(nil),             // 4: SvcResponseMsgInfo
	(*SvcResponsePbPullGroupMsgProxy)(nil), // 5: SvcResponsePbPullGroupMsgProxy
}
var file_register_proxy_proto_depIdxs = []int32{
	4, // 0: SvcRegisterProxyMsgResp.info:type_name -> SvcResponseMsgInfo
	1, // 1: SvcRegisterProxyMsgResp.groupList:type_name -> GroupList
	0, // 2: SvcRegisterProxyMsgResp.discussList:type_name -> DiscussList
	5, // 3: SvcRegisterProxyMsgResp.groupMsg:type_name -> SvcResponsePbPullGroupMsgProxy
	2, // 4: SvcRegisterProxyMsgResp.discussMsg:type_name -> SvcPbResponsePullDisMsgProxy
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_register_proxy_proto_init() }
func file_register_proxy_proto_init() {
	if File_register_proxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_register_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscussList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcPbResponsePullDisMsgProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcRegisterProxyMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcResponseMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcResponsePbPullGroupMsgProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_register_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_register_proxy_proto_goTypes,
		DependencyIndexes: file_register_proxy_proto_depIdxs,
		MessageInfos:      file_register_proxy_proto_msgTypes,
	}.Build()
	File_register_proxy_proto = out.File
	file_register_proxy_proto_rawDesc = nil
	file_register_proxy_proto_goTypes = nil
	file_register_proxy_proto_depIdxs = nil
}
